name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out  code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 .


  test:
    needs: lint
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          sudo service postgresql start
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'rest_user_password';"
          sudo -u postgres psql -c "CREATE DATABASE restdatabase;"
          sudo -u postgres psql -c "CREATE ROLE runner WITH LOGIN PASSWORD 'rest_user_password';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE restdatabase TO runner;"
          sudo -u postgres psql -c "GRANT CREATE ON SCHEMA public TO runner;"
          echo "DATABASE_URL=postgres://runner:rest_user_password@localhost/restdatabase" >> $GITHUB_ENV

      - name: Run makemigrations
        run: |
          export SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
          python manage.py makemigrations

      - name: Run migrations
        run: python manage.py migrate

      - name: Run tests
        run: python manage.py test

#  build:
##    needs: test
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Log in Docker HUb
#        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
#
#      - name: Build DOcker image
#        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .
#
#      - name: Push Docker image in Docker hub
#        run: docker push -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .
#
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Set up SSH
#        uses: webfactory/ssh-agent@v0.9.0
#        with:
#          ssh-private-key: ${{ secrets.SSH_KEY }}
#
#
#      - name: Deploy to server
#        run: |
#          ssh -o StrictKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
#          docker stop myapp || true
#          docker rm myapp || true
#          docker run -d --name my app -p 80:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
#          EOF
