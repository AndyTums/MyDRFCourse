name: Django CI/CD Pipeline

on: [push, pull_request]

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out  code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 .

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create database and user
      env:
        PGPASSWORD: 4988  # Пароль для пользователя postgres
      run: |
        psql -h localhost -U postgres -c "CREATE USER postgres WITH PASSWORD '4988';"
        psql -h localhost -U postgres -c "CREATE DATABASE MyDRFCourse OWNER postgres;"
        psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE MyDRFCourse TO postgres;"

    - name: Run makemigrations
      run: |
        export SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
        python manage.py makemigrations

    - name: Run migrate
      run: |
        export SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
        python manage.py migrate

    - name: Run tests
      run: python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.1
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Copy project files to server
      run: |
        rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

    - name: Install dependencies on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
        EOF

    - name: Apply migrations on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          source venv/bin/activate
          python manage.py migrate
        EOF

    - name: Collect static files on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          source venv/bin/activate
          python manage.py collectstatic --noinput
        EOF

    - name: Restart application
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          sudo systemctl restart myapp.service
        EOF
